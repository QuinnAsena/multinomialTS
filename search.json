[{"path":"https://quinnasena.github.io/multinomialTS/articles/multinomialTS-vignette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"multinomialTS Vignette","text":"One primary goals model able test multiple hypotheses data lend statistical support different hypotheses. example environmental drivers strongest effects taxa? , interactions among taxa abiotic variables driving change system? state-space approach allows us estimate coefficients taxa interactions driver-taxa relationships, don’t get methods ordination cluster analysis. recommend method complimentary methods, advantages. vignette take us : Choosing binning resolution mnTS() (Section 2.1 Section 2.2). Finding initial conditions mnGLMM() (Section 2.3.1). Fitting mnTS() without species interactions (Section 2.3.1.4). Assess resulting models (Section 2.4).","code":""},{"path":"https://quinnasena.github.io/multinomialTS/articles/multinomialTS-vignette.html","id":"this-vignette","dir":"Articles","previous_headings":"","what":"This vignette","title":"multinomialTS Vignette","text":"vignette take us : Choosing binning resolution mnTS() (Section 2.1 Section 2.2). Finding initial conditions mnGLMM() (Section 2.3.1). Fitting mnTS() without species interactions (Section 2.3.1.4). Assess resulting models (Section 2.4).","code":""},{"path":"https://quinnasena.github.io/multinomialTS/articles/multinomialTS-vignette.html","id":"fitting-mnts","dir":"Articles","previous_headings":"","what":"Fitting mnTS()","title":"multinomialTS Vignette","text":"vignette work data focal taxa groups already wrangled. second vignette added cover data wrangling, now see workshop state variable (YY) data look like: covariate (XX): moment, keeping age depth columns tibbles. columns common variable match two tibbles, removed little later. start choosing resolution model predictions (e.g., predicting ecological process 50 100 year intervals). looks great! bin data around 50-75 years, still data independent bins. Now know roughly bin-width use maximize number observations state variables, apply bin-width state variables covariate data. Covariates need handled according decisions made around state variables, , state variables binned century-level resolution covariates must match resolution. can finer temporal resolution covariates state variables. dataset, state variables 95 observations, covariate 646 observations time-span. observations environmental covariates common palaeo-data works well fitting model. Since need apply binning procedure state variables covariate, like join datasets. Charcoal sampled greater depth pollen data, going clip covariate extent state variables join two datasets common variable, age. Now data joined. Note covariate XX (char_acc) observations every cm, whereas pollen sampled less frequent intervals (OK! :smiley:). always lots quick checks like head(), tail(), dim() (many !) make sure catch coding mistakes! looks good, can now bin data appropriate temporal resolution fitting model. Choosing bin-width may take trial error, ’m going bin-width 50 years. now apply bins data. types covariates want average value covariate bin. pollen count data, want sum. underlying multinomial distribution model. Let’s see data look like binned 50 year resolution: looking good, reduced time-intervals run model. data now 160 rows complete covariate data, containing 93 state variable observations. original number pollen observations 95, summed many observations within bins. multinomialTS requires two matrices, site--species matrix YY, covariate matrix XX, leave tibbles behind split data. XX variables may different types (e.g., continuous, categorical…) scaled relative . Ok, now : Chosen temporal resolution model 50-year bins Organised data site--species matrix YY 50-year bins Binned scaled covariate matrix XX , can fit model. mnTS() function provide estimates biotic interactions (CC matrix), taxa-driver relationships (BB matrix), cross-correlated error (VV matrix). model needs initial starting values parameters begin . get initial starting conditions data running mnGLMM() function. mnGLMM() returns estimates BB VV matrices (CC matrix) assumes time gaps data. Tip arguments starting values mnGLMM() mnTS() suffixed .start (e.g., B.start starting values BB matrix). arguments parameters estimated suffixed .fixed (e.g., B.fixed parameters estimated BB matrix). Now, lets set parameters mnGLMM(). need: vector indicates row indices state variable observations: sample_idx integer number covariates (+ 1 mnGLMM()): p integer number state variables: n matrix starting values BB: B.start.glmm matrix BB parameters estimate: B.fixed.glmm matrix VV parameters estimate: V.fixed.glmm Set-remaining parameters: parameters used arguments mnGLMM() function. Check printing console. matrix needs correct dimensions given number taxa number covariates. position elements matrix reflect species /covariates, see later output model. Remember mnGLMM() handle gaps data fits complete XX YY matrices. created variable observation indices (sample_idx), mnGLMM() index matrices variable: e.g., story_pollen_matrix[sample_idx, ]. outputs mnGLMM() can examined summary(glmm_mod) function. Now, lets set parameters mnTS(). mTS() needs: row indices : sample_idx number covariates: p number state variables: n BOBO: B0.start.mnTS (intercept) BB: B.start.mnTS (driver-taxa) CC: C.start.mnTS (taxa interactions) VV: V.start.mnTS (cross-correlated error) BOBO: B0.fixed.mnTS BB: B.fixed.mnTS CC: C.fixed.mnTS VV: V.fixed.mnTS using output mnGLMM() starting values matrices B0B0, BB, VV. mnGLMM() provide estimates CC, handle CC little differently input values close zero parameter estimated let mnTS() rest. Remember, mnTS() handle gaps state-variables data covariate matrix. following code, use complete (gaps) YY matrix story_pollen_matrix[sample_idx, ] dimensions: 93, 5. full XX matrix: story_char_matrix_scaled dimensions: 160, 1 fit model twice: without taxa interactions without taxa interactions. Without interactions interactions start_time <- Sys.time() mnTS_mod <- mnTS(Y = story_pollen_matrix[sample_idx, ],                  X = story_char_matrix_scaled, Tsample = sample_idx,                  B0.start = B0.start.mnTS, B0.fixed = B0.fixed.mnTS,                  B.start = B.start.mnTS, B.fixed = B.fixed.mnTS,                  C.start = C.start.mnTS, C.fixed = C.fixed.mnTS,                  V.start = V.start.mnTS, V.fixed = V.fixed.mnTS,                  dispersion.fixed = 1, maxit.optim = 1e+6) # maxit.optim max number iterations optimiser complete stopping. # increase maxit.optim model needs lot time fit. end_time <- Sys.time() end_time - start_time  Time difference 1.201289 mins coef() summary() functions show model outputs. Let’s check coefficients interaction model: found bootstrapping provides better estimates standard erros (subsequent P-values). boot() function bootstrap model, may take long time. won’t today, strongly recommend bootstrapping final models. summary model provides log likelihood AIC (akaike information criterion). can used comparing models. Today use AIC. AIC penalised number parameters estimated, can better comparing models one parameters estimated (.e., interaction model estimating parameters model without interactions). AIC (log likelihood) values can accessed directly mnTS_mod_int$AIC.","code":"# Load required packages library(ggplot2) library(dplyr) library(tidyr) library(stringr) library(scales) library(RcppArmadillo) library(minqa) library(matrixStats) library(numDeriv) library(mvtnorm) library(multinomialTS)  # Read-in the wrangled data  # Read in our X variables data(\"story_char_wide\", package = \"multinomialTS\") # Read in the long data for plotting data(\"story_pollen_wide\", package = \"multinomialTS\") head(story_pollen_wide) # A tibble: 6 × 7 # Groups:   age, depth [6]      age depth other hardwood `Fagus grandifolia` Quercus Ulmus    <dbl> <dbl> <int>    <int>               <int>   <int> <int> 1 -66.2    0.5   106       60                   8      96     9 2   2.85  32.5   169       26                   8      59    10 3  45.8   64.5   189       27                   8      58     7 4  94.1   96.5   209       17                   2      42    17 5 191.   128.    161       34                  13      55    20 6 203.   132.     88       52                  34      91    19 head(story_char_wide) # A tibble: 6 × 3     age depth char_acc   <dbl> <dbl>    <dbl> 1 -66.2   0.5      0 2 -63.4   1.5     15.8 3 -61.4   2.5     40.3 4 -59.8   3.5     21.8 5 -58.5   4.5     37.3 6 -57.2   5.5     29.8 # Time-span of the data divided by the number of observations max(story_pollen_wide$age) / nrow(story_pollen_wide) [1] 83.48578 # Age differences between successive observations diff(story_pollen_wide$age) [1]  69.017  42.946  48.331  96.968  11.459  14.340  54.308  55.284 138.681 [10]  66.118  48.695 143.230 103.015 186.753  58.537  54.550  52.888  50.954 [19] 104.623 100.248 100.144  51.406  53.372  52.350  53.950  51.957  53.782 [28]  59.512  72.266 168.719 111.125  47.302  47.531  47.949  55.391  90.190 [37]  66.359  68.199  97.921  60.144  54.207 109.400 165.792 141.147  93.284 [46]  90.969  85.959  87.634  86.346  79.080  85.733  84.658  85.647  85.731 [55]  86.000  88.257  84.158  86.849  90.252 144.587  79.708  89.321  43.635 [64]  43.511  42.991  42.250  44.523  47.083  54.088 115.201  99.857  73.484 [73] 128.326 116.359 119.324 123.707 132.304 219.725 184.122  71.101  68.843 [82]  66.205  65.555  71.999  71.922  86.020 153.328 103.854  76.139  71.061 [91]  71.132 129.632 127.729 137.070 # The range of the age differences range(diff(story_pollen_wide$age)) [1]  11.459 219.725 # the average of the age differences mean(diff(story_pollen_wide$age)) [1] 85.0778 sd(diff(story_pollen_wide$age)) [1] 38.36777 # Clip covariate data to the extent of the state variables # Join the two by age so that we get a square matrix story_join <- story_char_wide |>   filter(age <= max(story_pollen_wide$age)) |>   left_join(story_pollen_wide)  # Always double check dimensions before/after joining! # dim(story_join) # tail(story_join) head(story_join, n = 10) # A tibble: 10 × 8      age depth char_acc other hardwood `Fagus grandifolia` Quercus Ulmus    <dbl> <dbl>    <dbl> <int>    <int>               <int>   <int> <int>  1 -66.2   0.5     0      106       60                   8      96     9  2 -63.4   1.5    15.8     NA       NA                  NA      NA    NA  3 -61.4   2.5    40.3     NA       NA                  NA      NA    NA  4 -59.8   3.5    21.8     NA       NA                  NA      NA    NA  5 -58.5   4.5    37.3     NA       NA                  NA      NA    NA  6 -57.2   5.5    29.8     NA       NA                  NA      NA    NA  7 -56.0   6.5    34.4     NA       NA                  NA      NA    NA  8 -54.8   7.5    21.2     NA       NA                  NA      NA    NA  9 -53.7   8.5    20.5     NA       NA                  NA      NA    NA 10 -52.6   9.5     8.26    NA       NA                  NA      NA    NA tail(story_join, n = 10) # A tibble: 10 × 8      age depth char_acc other hardwood `Fagus grandifolia` Quercus Ulmus    <dbl> <dbl>    <dbl> <int>    <int>               <int>   <int> <int>  1 7777.  648.     2.50    NA       NA                  NA      NA    NA  2 7794.  648.     8.19    19       49                   2     142    45  3 7812.  650.    19.1     NA       NA                  NA      NA    NA  4 7829.  650.     6.19    NA       NA                  NA      NA    NA  5 7845.  652.     2.78    NA       NA                  NA      NA    NA  6 7863.  652.     4.20    NA       NA                  NA      NA    NA  7 7880.  654.     5.02    NA       NA                  NA      NA    NA  8 7898.  654.     3.17    NA       NA                  NA      NA    NA  9 7914.  656.     4.51    NA       NA                  NA      NA    NA 10 7931.  656.     2.60    43       39                   3     172    37 # This code chunks the data into bins and gives us a grouping variable \"bins\"  bin_width <- 50 bins <- cut(story_join$age,             breaks = seq(from = min(story_join$age),             to = max(story_join$age + bin_width),             by = bin_width), include.lowest = TRUE, labels = FALSE) # The following code  story_binned <- bind_cols(bins = bins, story_join) |>   group_by(bins) |> # Group the data by the bins so that we calculate per time bin   summarise(     age = mean(age, na.rm = T), # the center of the bin     char_acc = mean(char_acc, na.rm = T), # mean charcoal accumulation rate per bin     other = sum(other, na.rm = T), # the sums of the count data     hardwood = sum(hardwood, na.rm = T),     `Fagus grandifolia` = sum(`Fagus grandifolia`, na.rm = T),     Ulmus = sum(Ulmus, na.rm = T),     Quercus = sum(Quercus, na.rm = T)   ) |>   arrange(desc(age)) # Be aware that the gaps in the pollen data are now filled with 0's not NA head(story_binned, n = 10) # A tibble: 10 × 8     bins   age char_acc other hardwood `Fagus grandifolia` Ulmus Quercus    <int> <dbl>    <dbl> <int>    <int>               <int> <int>   <int>  1   160 7914.     3.43    43       39                   3    37     172  2   159 7863.     4.00     0        0                   0     0       0  3   158 7812.    11.1     19       49                   2    45     142  4   157 7761.     4.06     0        0                   0     0       0  5   156 7713.     5.29     0        0                   0     0       0  6   155 7666.     8.24    34       65                   1    68     129  7   154 7609.     8.50     0        0                   0     0       0  8   153 7553.     9.27    39       43                   2    60     145  9   152 7502.     5.05     0        0                   0     0       0 10   151 7457.     5.46    30       69                   7    57     125 story_pollen_matrix <- story_binned |>  # Select taxa   select(other, hardwood, Ulmus, `Fagus grandifolia`, Quercus) |>    rename(\"Fagus\" = \"Fagus grandifolia\") |>    as.matrix() # Replacing 0 with NA is not strictly necessary the way we use the data today # But it is a good safety to avoid 0-count data where it should be no observation story_pollen_matrix[which(rowSums(story_pollen_matrix) == 0), ] <- NA head(story_pollen_matrix) other hardwood Ulmus Fagus Quercus [1,]    43       39    37     3     172 [2,]    NA       NA    NA    NA      NA [3,]    19       49    45     2     142 [4,]    NA       NA    NA    NA      NA [5,]    NA       NA    NA    NA      NA [6,]    34       65    68     1     129 story_char_matrix_scaled <- story_binned |> # select covariates   select(char_acc) |>    as.matrix() |>    scale() # Scale covariates head(story_char_matrix_scaled) char_acc [1,] -0.9826414 [2,] -0.8978991 [3,]  0.1548837 [4,] -0.8894600 [5,] -0.7078643 [6,] -0.2731469 # set-up sample index sample_idx <- which(rowSums(story_pollen_matrix) != 0) # make sure it works head(story_pollen_matrix[sample_idx, ]) other hardwood Ulmus Fagus Quercus [1,]    43       39    37     3     172 [2,]    19       49    45     2     142 [3,]    34       65    68     1     129 [4,]    39       43    60     2     145 [5,]    30       69    57     7     125 [6,]    30       80    49    13     116 # Set-up parameters p <- ncol(story_char_matrix_scaled) + 1 # Number of independent variables plus intercept n <- ncol(story_pollen_matrix) # number of taxa V.fixed.glmm <- diag(n) diag(V.fixed.glmm) <- NA V.fixed.glmm[1] <- 1 B.fixed.glmm <- matrix(c(rep(0,p),rep(NA, (n - 1) * p)), p, n) # reference taxa [,1] are set to 0 B.start.glmm <- matrix(c(rep(0,p),rep(.01, (n - 1) * p)), p, n) # reference taxa [,1] are set to 0 # fit glmm start_time <- Sys.time() glmm_mod <- mnGLMM(Y = story_pollen_matrix[sample_idx, ],                    X = story_char_matrix_scaled[sample_idx, ,drop = F],                    B.start = B.start.glmm,                    B.fixed = B.fixed.glmm,                    V.fixed = V.fixed.glmm) end_time <- Sys.time() end_time - start_time Time difference of 14.74743 secs summary(glmm_mod) Call: mnGLMM with Tmax =  93  n =  5  logLik = 506.1927,  AIC = -984.3855 [df = 14]  dispersion parameter =  1  Fitted Coefficients with approximate se                            Coef.         se          t            P (intercept).hardwood  0.32520544 0.08449697  3.8487232 1.187351e-04 char_acc.hardwood    -0.15611315 0.08828450 -1.7682962 7.701141e-02 (intercept).Ulmus    -0.31413043 0.11063692 -2.8392911 4.521389e-03 char_acc.Ulmus       -0.27877420 0.10904240 -2.5565671 1.057107e-02 (intercept).Fagus    -0.26463309 0.11061622 -2.3923534 1.674071e-02 char_acc.Fagus       -0.44517877 0.11465596 -3.8827356 1.032879e-04 (intercept).Quercus   0.99820549 0.08800678 11.3423702 8.092255e-30 char_acc.Quercus     -0.06223211 0.09098390 -0.6839903 4.939813e-01   Overall model  B =             other   hardwood      Ulmus      Fagus     Quercus (intercept)     0  0.3252054 -0.3141304 -0.2646331  0.99820549 char_acc        0 -0.1561132 -0.2787742 -0.4451788 -0.06223211  sigma =  1.055384  V =          other   hardwood     Ulmus     Fagus    Quercus other        1 0.00000000 0.0000000 0.0000000 0.00000000 hardwood     0 0.00443052 0.0000000 0.0000000 0.00000000 Ulmus        0 0.00000000 0.3021339 0.0000000 0.00000000 Fagus        0 0.00000000 0.0000000 0.3045231 0.00000000 Quercus      0 0.00000000 0.0000000 0.0000000 0.07575829 # B.start etc B0.start.mnTS <- glmm_mod$B[1, , drop = F] B.start.mnTS <- glmm_mod$B[2, , drop = F]  sigma.start.mnTS <- glmm_mod$sigma  V.fixed.mnTS <- matrix(NA, n, n) # Covariance matrix of environmental variation in process eq V.fixed.mnTS[1] <- 1  V.start.mnTS <- V.fixed.mnTS V.start.mnTS <- glmm_mod$V  B.fixed.mnTS <- matrix(NA, p-1, n) B.fixed.mnTS[,1] <- 0 B0.fixed.mnTS = matrix(c(0, rep(NA, n - 1)), nrow = 1, ncol = n)  # Set-up C without interactions C.start.mnTS  <- .5 * diag(n) C.fixed.mnTS <- C.start.mnTS C.fixed.mnTS[C.fixed.mnTS != 0] <- NA  # Set-up C with interactions between Fagus and Quercus C.start.int.mnTS  <- .5 * diag(n) C.start.int.mnTS[5, 4] <- .001 C.start.int.mnTS[4, 5] <- .001 C.fixed.int.mnTS <- C.start.int.mnTS C.fixed.int.mnTS[C.fixed.int.mnTS != 0] <- NA start_time <- Sys.time() mnTS_mod <- mnTS(Y = story_pollen_matrix[sample_idx, ],                  X = story_char_matrix_scaled, Tsample = sample_idx,                  B0.start = B0.start.mnTS, B0.fixed = B0.fixed.mnTS,                  B.start = B.start.mnTS, B.fixed = B.fixed.mnTS,                  C.start = C.start.mnTS, C.fixed = C.fixed.mnTS,                  V.start = V.start.mnTS, V.fixed = V.fixed.mnTS,                  dispersion.fixed = 1, maxit.optim = 1e+6) # maxit.optim is the max number of iterations the optimiser will complete before stopping. # increase maxit.optim if the model needs a lot of time to fit. end_time <- Sys.time() end_time - start_time Time difference of 1.201289 mins start_time <- Sys.time() mnTS_mod_int <- mnTS(Y = story_pollen_matrix[sample_idx, ],                      X = story_char_matrix_scaled, Tsample = sample_idx,                      B0.start = mnTS_mod$B0, B0.fixed = B0.fixed.mnTS,                      B.start = mnTS_mod$B, B.fixed = B.fixed.mnTS,                      C.start = mnTS_mod$C, C.fixed = C.fixed.int.mnTS,                      V.start = mnTS_mod$V, V.fixed = V.fixed.mnTS,                      dispersion.fixed = 1, maxit.optim = 1e+6) end_time <- Sys.time()  end_time - start_time Time difference of 3.479115 mins summary(mnTS_mod_int) Call: mnTS with Tmax =  93  n =  5  logLik = 750.0241,  AIC = -1438.048 [df = 31]  dispersion parameter =  1  Fitted Coefficients with approximate se                            Coef.          se          t             P hardwood              0.64627755 0.128823953   5.016750  5.255293e-07 Ulmus                -0.29933182 0.113566390  -2.635743  8.395329e-03 Fagus                -0.91867049 0.255370791  -3.597398  3.214159e-04 Quercus               1.38347522 0.089608656  15.439080  8.936578e-54 sp.other.other        0.89177470 0.011064525  80.597648  0.000000e+00 sp.hardwood.hardwood  0.96083347 0.013894772  69.150720  0.000000e+00 sp.Ulmus.Ulmus        0.94591268 0.017282507  54.732377  0.000000e+00 sp.Fagus.Fagus        0.83383821 0.036552053  22.812350 3.457807e-115 sp.Quercus.Fagus      0.06930431         NaN        NaN           NaN sp.Fagus.Quercus     -0.08431459         NaN        NaN           NaN sp.Quercus.Quercus    0.99072926 0.007589615 130.537489  0.000000e+00 char_acc.hardwood    -0.15774081 0.021983518  -7.175413  7.208936e-13 char_acc.Ulmus       -0.15937356 0.037985313  -4.195663  2.720749e-05 char_acc.Fagus       -0.21576678         NaN        NaN           NaN char_acc.Quercus     -0.18580969 0.019967371  -9.305666  1.331547e-20   Fitted Coefficients with conditional approximate se                            Coef.          se          t            P hardwood              0.64627755 0.146885289   4.399879 1.083111e-05 Ulmus                -0.29933182 0.176984151  -1.691292 9.078111e-02 Fagus                -0.91867049 0.265149460  -3.464727 5.307700e-04 Quercus               1.38347522 0.068468911  20.205889 8.689079e-91 sp.other.other        0.89177470 0.010890072  81.888780 0.000000e+00 sp.hardwood.hardwood  0.96083347 0.010722160  89.611929 0.000000e+00 sp.Ulmus.Ulmus        0.94591268 0.009032307 104.725480 0.000000e+00 sp.Fagus.Fagus        0.83383821 0.021011423  39.684996 0.000000e+00 sp.Quercus.Fagus      0.06930431 0.007267487   9.536213 1.481432e-21 sp.Fagus.Quercus     -0.08431459 0.034418562  -2.449684 1.429818e-02 sp.Quercus.Quercus    0.99072926 0.014078411  70.372233 0.000000e+00 sigma                 0.66036129 0.037411671  17.651211 9.959806e-70 char_acc.hardwood    -0.15774081 0.024046618  -6.559792 5.388286e-11 char_acc.Ulmus       -0.15937356 0.031947105  -4.988670 6.079642e-07 char_acc.Fagus       -0.21576678 0.060354060  -3.575017 3.502053e-04 char_acc.Quercus     -0.18580969 0.018905045  -9.828577 8.480861e-23   Overall model  B0 =             other  hardwood      Ulmus      Fagus  Quercus (intercept)     0 0.6462775 -0.2993318 -0.9186705 1.383475   B =          other   hardwood      Ulmus      Fagus    Quercus char_acc     0 -0.1577408 -0.1593736 -0.2157668 -0.1858097   C =              other  hardwood     Ulmus      Fagus     Quercus other    0.8917747 0.0000000 0.0000000 0.00000000  0.00000000 hardwood 0.0000000 0.9608335 0.0000000 0.00000000  0.00000000 Ulmus    0.0000000 0.0000000 0.9459127 0.00000000  0.00000000 Fagus    0.0000000 0.0000000 0.0000000 0.83383821 -0.08431459 Quercus  0.0000000 0.0000000 0.0000000 0.06930431  0.99072926  sigma =  0.6603613  V =              other   hardwood      Ulmus     Fagus    Quercus other    1.0000000 0.25286788 0.24451372 0.4181247 0.13922069 hardwood 0.2528679 0.07460389 0.06003974 0.1084949 0.03416640 Ulmus    0.2445137 0.06003974 0.09392674 0.1082596 0.03023850 Fagus    0.4181247 0.10849494 0.10825965 0.3166117 0.02520510 Quercus  0.1392207 0.03416640 0.03023850 0.0252051 0.02726373 coef(mnTS_mod_int) Coef.          se          t             P hardwood              0.64627755 0.128823953   5.016750  5.255293e-07 Ulmus                -0.29933182 0.113566390  -2.635743  8.395329e-03 Fagus                -0.91867049 0.255370791  -3.597398  3.214159e-04 Quercus               1.38347522 0.089608656  15.439080  8.936578e-54 sp.other.other        0.89177470 0.011064525  80.597648  0.000000e+00 sp.hardwood.hardwood  0.96083347 0.013894772  69.150720  0.000000e+00 sp.Ulmus.Ulmus        0.94591268 0.017282507  54.732377  0.000000e+00 sp.Fagus.Fagus        0.83383821 0.036552053  22.812350 3.457807e-115 sp.Quercus.Fagus      0.06930431         NaN        NaN           NaN sp.Fagus.Quercus     -0.08431459         NaN        NaN           NaN sp.Quercus.Quercus    0.99072926 0.007589615 130.537489  0.000000e+00 char_acc.hardwood    -0.15774081 0.021983518  -7.175413  7.208936e-13 char_acc.Ulmus       -0.15937356 0.037985313  -4.195663  2.720749e-05 char_acc.Fagus       -0.21576678         NaN        NaN           NaN char_acc.Quercus     -0.18580969 0.019967371  -9.305666  1.331547e-20 data.frame(without_interactions = mnTS_mod$AIC,            with_interactions = mnTS_mod_int$AIC) without_interactions with_interactions 1            -1391.369         -1438.048"},{"path":"https://quinnasena.github.io/multinomialTS/articles/multinomialTS-vignette.html","id":"sec-Y","dir":"Articles","previous_headings":"","what":"State variables YY","title":"multinomialTS Vignette","text":"start choosing resolution model predictions (e.g., predicting ecological process 50 100 year intervals). looks great! bin data around 50-75 years, still data independent bins. Now know roughly bin-width use maximize number observations state variables, apply bin-width state variables covariate data.","code":"# Time-span of the data divided by the number of observations max(story_pollen_wide$age) / nrow(story_pollen_wide) [1] 83.48578 # Age differences between successive observations diff(story_pollen_wide$age) [1]  69.017  42.946  48.331  96.968  11.459  14.340  54.308  55.284 138.681 [10]  66.118  48.695 143.230 103.015 186.753  58.537  54.550  52.888  50.954 [19] 104.623 100.248 100.144  51.406  53.372  52.350  53.950  51.957  53.782 [28]  59.512  72.266 168.719 111.125  47.302  47.531  47.949  55.391  90.190 [37]  66.359  68.199  97.921  60.144  54.207 109.400 165.792 141.147  93.284 [46]  90.969  85.959  87.634  86.346  79.080  85.733  84.658  85.647  85.731 [55]  86.000  88.257  84.158  86.849  90.252 144.587  79.708  89.321  43.635 [64]  43.511  42.991  42.250  44.523  47.083  54.088 115.201  99.857  73.484 [73] 128.326 116.359 119.324 123.707 132.304 219.725 184.122  71.101  68.843 [82]  66.205  65.555  71.999  71.922  86.020 153.328 103.854  76.139  71.061 [91]  71.132 129.632 127.729 137.070 # The range of the age differences range(diff(story_pollen_wide$age)) [1]  11.459 219.725 # the average of the age differences mean(diff(story_pollen_wide$age)) [1] 85.0778 sd(diff(story_pollen_wide$age)) [1] 38.36777"},{"path":"https://quinnasena.github.io/multinomialTS/articles/multinomialTS-vignette.html","id":"sec-X","dir":"Articles","previous_headings":"","what":"Handling the covariates XX","title":"multinomialTS Vignette","text":"Covariates need handled according decisions made around state variables, , state variables binned century-level resolution covariates must match resolution. can finer temporal resolution covariates state variables. dataset, state variables 95 observations, covariate 646 observations time-span. observations environmental covariates common palaeo-data works well fitting model. Since need apply binning procedure state variables covariate, like join datasets. Charcoal sampled greater depth pollen data, going clip covariate extent state variables join two datasets common variable, age. Now data joined. Note covariate XX (char_acc) observations every cm, whereas pollen sampled less frequent intervals (OK! :smiley:). always lots quick checks like head(), tail(), dim() (many !) make sure catch coding mistakes! looks good, can now bin data appropriate temporal resolution fitting model. Choosing bin-width may take trial error, ’m going bin-width 50 years. now apply bins data. types covariates want average value covariate bin. pollen count data, want sum. underlying multinomial distribution model. Let’s see data look like binned 50 year resolution: looking good, reduced time-intervals run model. data now 160 rows complete covariate data, containing 93 state variable observations. original number pollen observations 95, summed many observations within bins. multinomialTS requires two matrices, site--species matrix YY, covariate matrix XX, leave tibbles behind split data. XX variables may different types (e.g., continuous, categorical…) scaled relative .","code":"# Clip covariate data to the extent of the state variables # Join the two by age so that we get a square matrix story_join <- story_char_wide |>   filter(age <= max(story_pollen_wide$age)) |>   left_join(story_pollen_wide)  # Always double check dimensions before/after joining! # dim(story_join) # tail(story_join) head(story_join, n = 10) # A tibble: 10 × 8      age depth char_acc other hardwood `Fagus grandifolia` Quercus Ulmus    <dbl> <dbl>    <dbl> <int>    <int>               <int>   <int> <int>  1 -66.2   0.5     0      106       60                   8      96     9  2 -63.4   1.5    15.8     NA       NA                  NA      NA    NA  3 -61.4   2.5    40.3     NA       NA                  NA      NA    NA  4 -59.8   3.5    21.8     NA       NA                  NA      NA    NA  5 -58.5   4.5    37.3     NA       NA                  NA      NA    NA  6 -57.2   5.5    29.8     NA       NA                  NA      NA    NA  7 -56.0   6.5    34.4     NA       NA                  NA      NA    NA  8 -54.8   7.5    21.2     NA       NA                  NA      NA    NA  9 -53.7   8.5    20.5     NA       NA                  NA      NA    NA 10 -52.6   9.5     8.26    NA       NA                  NA      NA    NA tail(story_join, n = 10) # A tibble: 10 × 8      age depth char_acc other hardwood `Fagus grandifolia` Quercus Ulmus    <dbl> <dbl>    <dbl> <int>    <int>               <int>   <int> <int>  1 7777.  648.     2.50    NA       NA                  NA      NA    NA  2 7794.  648.     8.19    19       49                   2     142    45  3 7812.  650.    19.1     NA       NA                  NA      NA    NA  4 7829.  650.     6.19    NA       NA                  NA      NA    NA  5 7845.  652.     2.78    NA       NA                  NA      NA    NA  6 7863.  652.     4.20    NA       NA                  NA      NA    NA  7 7880.  654.     5.02    NA       NA                  NA      NA    NA  8 7898.  654.     3.17    NA       NA                  NA      NA    NA  9 7914.  656.     4.51    NA       NA                  NA      NA    NA 10 7931.  656.     2.60    43       39                   3     172    37 # This code chunks the data into bins and gives us a grouping variable \"bins\"  bin_width <- 50 bins <- cut(story_join$age,             breaks = seq(from = min(story_join$age),             to = max(story_join$age + bin_width),             by = bin_width), include.lowest = TRUE, labels = FALSE) # The following code  story_binned <- bind_cols(bins = bins, story_join) |>   group_by(bins) |> # Group the data by the bins so that we calculate per time bin   summarise(     age = mean(age, na.rm = T), # the center of the bin     char_acc = mean(char_acc, na.rm = T), # mean charcoal accumulation rate per bin     other = sum(other, na.rm = T), # the sums of the count data     hardwood = sum(hardwood, na.rm = T),     `Fagus grandifolia` = sum(`Fagus grandifolia`, na.rm = T),     Ulmus = sum(Ulmus, na.rm = T),     Quercus = sum(Quercus, na.rm = T)   ) |>   arrange(desc(age)) # Be aware that the gaps in the pollen data are now filled with 0's not NA head(story_binned, n = 10) # A tibble: 10 × 8     bins   age char_acc other hardwood `Fagus grandifolia` Ulmus Quercus    <int> <dbl>    <dbl> <int>    <int>               <int> <int>   <int>  1   160 7914.     3.43    43       39                   3    37     172  2   159 7863.     4.00     0        0                   0     0       0  3   158 7812.    11.1     19       49                   2    45     142  4   157 7761.     4.06     0        0                   0     0       0  5   156 7713.     5.29     0        0                   0     0       0  6   155 7666.     8.24    34       65                   1    68     129  7   154 7609.     8.50     0        0                   0     0       0  8   153 7553.     9.27    39       43                   2    60     145  9   152 7502.     5.05     0        0                   0     0       0 10   151 7457.     5.46    30       69                   7    57     125 story_pollen_matrix <- story_binned |>  # Select taxa   select(other, hardwood, Ulmus, `Fagus grandifolia`, Quercus) |>    rename(\"Fagus\" = \"Fagus grandifolia\") |>    as.matrix() # Replacing 0 with NA is not strictly necessary the way we use the data today # But it is a good safety to avoid 0-count data where it should be no observation story_pollen_matrix[which(rowSums(story_pollen_matrix) == 0), ] <- NA head(story_pollen_matrix) other hardwood Ulmus Fagus Quercus [1,]    43       39    37     3     172 [2,]    NA       NA    NA    NA      NA [3,]    19       49    45     2     142 [4,]    NA       NA    NA    NA      NA [5,]    NA       NA    NA    NA      NA [6,]    34       65    68     1     129 story_char_matrix_scaled <- story_binned |> # select covariates   select(char_acc) |>    as.matrix() |>    scale() # Scale covariates head(story_char_matrix_scaled) char_acc [1,] -0.9826414 [2,] -0.8978991 [3,]  0.1548837 [4,] -0.8894600 [5,] -0.7078643 [6,] -0.2731469"},{"path":"https://quinnasena.github.io/multinomialTS/articles/multinomialTS-vignette.html","id":"sec-fitting","dir":"Articles","previous_headings":"","what":"Fitting multinomialTS","title":"multinomialTS Vignette","text":"Ok, now : Chosen temporal resolution model 50-year bins Organised data site--species matrix YY 50-year bins Binned scaled covariate matrix XX , can fit model. mnTS() function provide estimates biotic interactions (CC matrix), taxa-driver relationships (BB matrix), cross-correlated error (VV matrix). model needs initial starting values parameters begin . get initial starting conditions data running mnGLMM() function. mnGLMM() returns estimates BB VV matrices (CC matrix) assumes time gaps data. Tip arguments starting values mnGLMM() mnTS() suffixed .start (e.g., B.start starting values BB matrix). arguments parameters estimated suffixed .fixed (e.g., B.fixed parameters estimated BB matrix). Now, lets set parameters mnGLMM(). need: vector indicates row indices state variable observations: sample_idx integer number covariates (+ 1 mnGLMM()): p integer number state variables: n matrix starting values BB: B.start.glmm matrix BB parameters estimate: B.fixed.glmm matrix VV parameters estimate: V.fixed.glmm Set-remaining parameters: parameters used arguments mnGLMM() function. Check printing console. matrix needs correct dimensions given number taxa number covariates. position elements matrix reflect species /covariates, see later output model. Remember mnGLMM() handle gaps data fits complete XX YY matrices. created variable observation indices (sample_idx), mnGLMM() index matrices variable: e.g., story_pollen_matrix[sample_idx, ]. outputs mnGLMM() can examined summary(glmm_mod) function. Now, lets set parameters mnTS(). mTS() needs: row indices : sample_idx number covariates: p number state variables: n BOBO: B0.start.mnTS (intercept) BB: B.start.mnTS (driver-taxa) CC: C.start.mnTS (taxa interactions) VV: V.start.mnTS (cross-correlated error) BOBO: B0.fixed.mnTS BB: B.fixed.mnTS CC: C.fixed.mnTS VV: V.fixed.mnTS using output mnGLMM() starting values matrices B0B0, BB, VV. mnGLMM() provide estimates CC, handle CC little differently input values close zero parameter estimated let mnTS() rest. Remember, mnTS() handle gaps state-variables data covariate matrix. following code, use complete (gaps) YY matrix story_pollen_matrix[sample_idx, ] dimensions: 93, 5. full XX matrix: story_char_matrix_scaled dimensions: 160, 1 fit model twice: without taxa interactions without taxa interactions. Without interactions interactions start_time <- Sys.time() mnTS_mod <- mnTS(Y = story_pollen_matrix[sample_idx, ],                  X = story_char_matrix_scaled, Tsample = sample_idx,                  B0.start = B0.start.mnTS, B0.fixed = B0.fixed.mnTS,                  B.start = B.start.mnTS, B.fixed = B.fixed.mnTS,                  C.start = C.start.mnTS, C.fixed = C.fixed.mnTS,                  V.start = V.start.mnTS, V.fixed = V.fixed.mnTS,                  dispersion.fixed = 1, maxit.optim = 1e+6) # maxit.optim max number iterations optimiser complete stopping. # increase maxit.optim model needs lot time fit. end_time <- Sys.time() end_time - start_time  Time difference 1.201289 mins","code":"# set-up sample index sample_idx <- which(rowSums(story_pollen_matrix) != 0) # make sure it works head(story_pollen_matrix[sample_idx, ]) other hardwood Ulmus Fagus Quercus [1,]    43       39    37     3     172 [2,]    19       49    45     2     142 [3,]    34       65    68     1     129 [4,]    39       43    60     2     145 [5,]    30       69    57     7     125 [6,]    30       80    49    13     116 # Set-up parameters p <- ncol(story_char_matrix_scaled) + 1 # Number of independent variables plus intercept n <- ncol(story_pollen_matrix) # number of taxa V.fixed.glmm <- diag(n) diag(V.fixed.glmm) <- NA V.fixed.glmm[1] <- 1 B.fixed.glmm <- matrix(c(rep(0,p),rep(NA, (n - 1) * p)), p, n) # reference taxa [,1] are set to 0 B.start.glmm <- matrix(c(rep(0,p),rep(.01, (n - 1) * p)), p, n) # reference taxa [,1] are set to 0 # fit glmm start_time <- Sys.time() glmm_mod <- mnGLMM(Y = story_pollen_matrix[sample_idx, ],                    X = story_char_matrix_scaled[sample_idx, ,drop = F],                    B.start = B.start.glmm,                    B.fixed = B.fixed.glmm,                    V.fixed = V.fixed.glmm) end_time <- Sys.time() end_time - start_time Time difference of 14.74743 secs summary(glmm_mod) Call: mnGLMM with Tmax =  93  n =  5  logLik = 506.1927,  AIC = -984.3855 [df = 14]  dispersion parameter =  1  Fitted Coefficients with approximate se                            Coef.         se          t            P (intercept).hardwood  0.32520544 0.08449697  3.8487232 1.187351e-04 char_acc.hardwood    -0.15611315 0.08828450 -1.7682962 7.701141e-02 (intercept).Ulmus    -0.31413043 0.11063692 -2.8392911 4.521389e-03 char_acc.Ulmus       -0.27877420 0.10904240 -2.5565671 1.057107e-02 (intercept).Fagus    -0.26463309 0.11061622 -2.3923534 1.674071e-02 char_acc.Fagus       -0.44517877 0.11465596 -3.8827356 1.032879e-04 (intercept).Quercus   0.99820549 0.08800678 11.3423702 8.092255e-30 char_acc.Quercus     -0.06223211 0.09098390 -0.6839903 4.939813e-01   Overall model  B =             other   hardwood      Ulmus      Fagus     Quercus (intercept)     0  0.3252054 -0.3141304 -0.2646331  0.99820549 char_acc        0 -0.1561132 -0.2787742 -0.4451788 -0.06223211  sigma =  1.055384  V =          other   hardwood     Ulmus     Fagus    Quercus other        1 0.00000000 0.0000000 0.0000000 0.00000000 hardwood     0 0.00443052 0.0000000 0.0000000 0.00000000 Ulmus        0 0.00000000 0.3021339 0.0000000 0.00000000 Fagus        0 0.00000000 0.0000000 0.3045231 0.00000000 Quercus      0 0.00000000 0.0000000 0.0000000 0.07575829 # B.start etc B0.start.mnTS <- glmm_mod$B[1, , drop = F] B.start.mnTS <- glmm_mod$B[2, , drop = F]  sigma.start.mnTS <- glmm_mod$sigma  V.fixed.mnTS <- matrix(NA, n, n) # Covariance matrix of environmental variation in process eq V.fixed.mnTS[1] <- 1  V.start.mnTS <- V.fixed.mnTS V.start.mnTS <- glmm_mod$V  B.fixed.mnTS <- matrix(NA, p-1, n) B.fixed.mnTS[,1] <- 0 B0.fixed.mnTS = matrix(c(0, rep(NA, n - 1)), nrow = 1, ncol = n)  # Set-up C without interactions C.start.mnTS  <- .5 * diag(n) C.fixed.mnTS <- C.start.mnTS C.fixed.mnTS[C.fixed.mnTS != 0] <- NA  # Set-up C with interactions between Fagus and Quercus C.start.int.mnTS  <- .5 * diag(n) C.start.int.mnTS[5, 4] <- .001 C.start.int.mnTS[4, 5] <- .001 C.fixed.int.mnTS <- C.start.int.mnTS C.fixed.int.mnTS[C.fixed.int.mnTS != 0] <- NA start_time <- Sys.time() mnTS_mod <- mnTS(Y = story_pollen_matrix[sample_idx, ],                  X = story_char_matrix_scaled, Tsample = sample_idx,                  B0.start = B0.start.mnTS, B0.fixed = B0.fixed.mnTS,                  B.start = B.start.mnTS, B.fixed = B.fixed.mnTS,                  C.start = C.start.mnTS, C.fixed = C.fixed.mnTS,                  V.start = V.start.mnTS, V.fixed = V.fixed.mnTS,                  dispersion.fixed = 1, maxit.optim = 1e+6) # maxit.optim is the max number of iterations the optimiser will complete before stopping. # increase maxit.optim if the model needs a lot of time to fit. end_time <- Sys.time() end_time - start_time Time difference of 1.201289 mins start_time <- Sys.time() mnTS_mod_int <- mnTS(Y = story_pollen_matrix[sample_idx, ],                      X = story_char_matrix_scaled, Tsample = sample_idx,                      B0.start = mnTS_mod$B0, B0.fixed = B0.fixed.mnTS,                      B.start = mnTS_mod$B, B.fixed = B.fixed.mnTS,                      C.start = mnTS_mod$C, C.fixed = C.fixed.int.mnTS,                      V.start = mnTS_mod$V, V.fixed = V.fixed.mnTS,                      dispersion.fixed = 1, maxit.optim = 1e+6) end_time <- Sys.time()  end_time - start_time Time difference of 3.479115 mins"},{"path":"https://quinnasena.github.io/multinomialTS/articles/multinomialTS-vignette.html","id":"sec-glmm","dir":"Articles","previous_headings":"Fitting mnTS()","what":"Finding initial conditions using mnGLMM()","title":"multinomialTS Vignette","text":"mnTS() function provide estimates biotic interactions (CC matrix), taxa-driver relationships (BB matrix), cross-correlated error (VV matrix). model needs initial starting values parameters begin . get initial starting conditions data running mnGLMM() function. mnGLMM() returns estimates BB VV matrices (CC matrix) assumes time gaps data. Tip arguments starting values mnGLMM() mnTS() suffixed .start (e.g., B.start starting values BB matrix). arguments parameters estimated suffixed .fixed (e.g., B.fixed parameters estimated BB matrix). Now, lets set parameters mnGLMM(). need: vector indicates row indices state variable observations: sample_idx integer number covariates (+ 1 mnGLMM()): p integer number state variables: n matrix starting values BB: B.start.glmm matrix BB parameters estimate: B.fixed.glmm matrix VV parameters estimate: V.fixed.glmm Set-remaining parameters: parameters used arguments mnGLMM() function. Check printing console. matrix needs correct dimensions given number taxa number covariates. position elements matrix reflect species /covariates, see later output model. Remember mnGLMM() handle gaps data fits complete XX YY matrices. created variable observation indices (sample_idx), mnGLMM() index matrices variable: e.g., story_pollen_matrix[sample_idx, ]. outputs mnGLMM() can examined summary(glmm_mod) function. Now, lets set parameters mnTS(). mTS() needs: row indices : sample_idx number covariates: p number state variables: n BOBO: B0.start.mnTS (intercept) BB: B.start.mnTS (driver-taxa) CC: C.start.mnTS (taxa interactions) VV: V.start.mnTS (cross-correlated error) BOBO: B0.fixed.mnTS BB: B.fixed.mnTS CC: C.fixed.mnTS VV: V.fixed.mnTS using output mnGLMM() starting values matrices B0B0, BB, VV. mnGLMM() provide estimates CC, handle CC little differently input values close zero parameter estimated let mnTS() rest. Remember, mnTS() handle gaps state-variables data covariate matrix. following code, use complete (gaps) YY matrix story_pollen_matrix[sample_idx, ] dimensions: 93, 5. full XX matrix: story_char_matrix_scaled dimensions: 160, 1 fit model twice: without taxa interactions without taxa interactions. Without interactions interactions start_time <- Sys.time() mnTS_mod <- mnTS(Y = story_pollen_matrix[sample_idx, ],                  X = story_char_matrix_scaled, Tsample = sample_idx,                  B0.start = B0.start.mnTS, B0.fixed = B0.fixed.mnTS,                  B.start = B.start.mnTS, B.fixed = B.fixed.mnTS,                  C.start = C.start.mnTS, C.fixed = C.fixed.mnTS,                  V.start = V.start.mnTS, V.fixed = V.fixed.mnTS,                  dispersion.fixed = 1, maxit.optim = 1e+6) # maxit.optim max number iterations optimiser complete stopping. # increase maxit.optim model needs lot time fit. end_time <- Sys.time() end_time - start_time  Time difference 1.201289 mins","code":"# set-up sample index sample_idx <- which(rowSums(story_pollen_matrix) != 0) # make sure it works head(story_pollen_matrix[sample_idx, ]) other hardwood Ulmus Fagus Quercus [1,]    43       39    37     3     172 [2,]    19       49    45     2     142 [3,]    34       65    68     1     129 [4,]    39       43    60     2     145 [5,]    30       69    57     7     125 [6,]    30       80    49    13     116 # Set-up parameters p <- ncol(story_char_matrix_scaled) + 1 # Number of independent variables plus intercept n <- ncol(story_pollen_matrix) # number of taxa V.fixed.glmm <- diag(n) diag(V.fixed.glmm) <- NA V.fixed.glmm[1] <- 1 B.fixed.glmm <- matrix(c(rep(0,p),rep(NA, (n - 1) * p)), p, n) # reference taxa [,1] are set to 0 B.start.glmm <- matrix(c(rep(0,p),rep(.01, (n - 1) * p)), p, n) # reference taxa [,1] are set to 0 # fit glmm start_time <- Sys.time() glmm_mod <- mnGLMM(Y = story_pollen_matrix[sample_idx, ],                    X = story_char_matrix_scaled[sample_idx, ,drop = F],                    B.start = B.start.glmm,                    B.fixed = B.fixed.glmm,                    V.fixed = V.fixed.glmm) end_time <- Sys.time() end_time - start_time Time difference of 14.74743 secs summary(glmm_mod) Call: mnGLMM with Tmax =  93  n =  5  logLik = 506.1927,  AIC = -984.3855 [df = 14]  dispersion parameter =  1  Fitted Coefficients with approximate se                            Coef.         se          t            P (intercept).hardwood  0.32520544 0.08449697  3.8487232 1.187351e-04 char_acc.hardwood    -0.15611315 0.08828450 -1.7682962 7.701141e-02 (intercept).Ulmus    -0.31413043 0.11063692 -2.8392911 4.521389e-03 char_acc.Ulmus       -0.27877420 0.10904240 -2.5565671 1.057107e-02 (intercept).Fagus    -0.26463309 0.11061622 -2.3923534 1.674071e-02 char_acc.Fagus       -0.44517877 0.11465596 -3.8827356 1.032879e-04 (intercept).Quercus   0.99820549 0.08800678 11.3423702 8.092255e-30 char_acc.Quercus     -0.06223211 0.09098390 -0.6839903 4.939813e-01   Overall model  B =             other   hardwood      Ulmus      Fagus     Quercus (intercept)     0  0.3252054 -0.3141304 -0.2646331  0.99820549 char_acc        0 -0.1561132 -0.2787742 -0.4451788 -0.06223211  sigma =  1.055384  V =          other   hardwood     Ulmus     Fagus    Quercus other        1 0.00000000 0.0000000 0.0000000 0.00000000 hardwood     0 0.00443052 0.0000000 0.0000000 0.00000000 Ulmus        0 0.00000000 0.3021339 0.0000000 0.00000000 Fagus        0 0.00000000 0.0000000 0.3045231 0.00000000 Quercus      0 0.00000000 0.0000000 0.0000000 0.07575829 # B.start etc B0.start.mnTS <- glmm_mod$B[1, , drop = F] B.start.mnTS <- glmm_mod$B[2, , drop = F]  sigma.start.mnTS <- glmm_mod$sigma  V.fixed.mnTS <- matrix(NA, n, n) # Covariance matrix of environmental variation in process eq V.fixed.mnTS[1] <- 1  V.start.mnTS <- V.fixed.mnTS V.start.mnTS <- glmm_mod$V  B.fixed.mnTS <- matrix(NA, p-1, n) B.fixed.mnTS[,1] <- 0 B0.fixed.mnTS = matrix(c(0, rep(NA, n - 1)), nrow = 1, ncol = n)  # Set-up C without interactions C.start.mnTS  <- .5 * diag(n) C.fixed.mnTS <- C.start.mnTS C.fixed.mnTS[C.fixed.mnTS != 0] <- NA  # Set-up C with interactions between Fagus and Quercus C.start.int.mnTS  <- .5 * diag(n) C.start.int.mnTS[5, 4] <- .001 C.start.int.mnTS[4, 5] <- .001 C.fixed.int.mnTS <- C.start.int.mnTS C.fixed.int.mnTS[C.fixed.int.mnTS != 0] <- NA start_time <- Sys.time() mnTS_mod <- mnTS(Y = story_pollen_matrix[sample_idx, ],                  X = story_char_matrix_scaled, Tsample = sample_idx,                  B0.start = B0.start.mnTS, B0.fixed = B0.fixed.mnTS,                  B.start = B.start.mnTS, B.fixed = B.fixed.mnTS,                  C.start = C.start.mnTS, C.fixed = C.fixed.mnTS,                  V.start = V.start.mnTS, V.fixed = V.fixed.mnTS,                  dispersion.fixed = 1, maxit.optim = 1e+6) # maxit.optim is the max number of iterations the optimiser will complete before stopping. # increase maxit.optim if the model needs a lot of time to fit. end_time <- Sys.time() end_time - start_time Time difference of 1.201289 mins start_time <- Sys.time() mnTS_mod_int <- mnTS(Y = story_pollen_matrix[sample_idx, ],                      X = story_char_matrix_scaled, Tsample = sample_idx,                      B0.start = mnTS_mod$B0, B0.fixed = B0.fixed.mnTS,                      B.start = mnTS_mod$B, B.fixed = B.fixed.mnTS,                      C.start = mnTS_mod$C, C.fixed = C.fixed.int.mnTS,                      V.start = mnTS_mod$V, V.fixed = V.fixed.mnTS,                      dispersion.fixed = 1, maxit.optim = 1e+6) end_time <- Sys.time()  end_time - start_time Time difference of 3.479115 mins"},{"path":"https://quinnasena.github.io/multinomialTS/articles/multinomialTS-vignette.html","id":"setting-up-parameters-for-mngmll","dir":"Articles","previous_headings":"Fitting mnTS()","what":"Setting-up parameters for mnGMLL()","title":"multinomialTS Vignette","text":"Now, lets set parameters mnGLMM(). need: vector indicates row indices state variable observations: sample_idx integer number covariates (+ 1 mnGLMM()): p integer number state variables: n matrix starting values BB: B.start.glmm matrix BB parameters estimate: B.fixed.glmm matrix VV parameters estimate: V.fixed.glmm Set-remaining parameters: parameters used arguments mnGLMM() function. Check printing console. matrix needs correct dimensions given number taxa number covariates. position elements matrix reflect species /covariates, see later output model.","code":"# set-up sample index sample_idx <- which(rowSums(story_pollen_matrix) != 0) # make sure it works head(story_pollen_matrix[sample_idx, ]) other hardwood Ulmus Fagus Quercus [1,]    43       39    37     3     172 [2,]    19       49    45     2     142 [3,]    34       65    68     1     129 [4,]    39       43    60     2     145 [5,]    30       69    57     7     125 [6,]    30       80    49    13     116 # Set-up parameters p <- ncol(story_char_matrix_scaled) + 1 # Number of independent variables plus intercept n <- ncol(story_pollen_matrix) # number of taxa V.fixed.glmm <- diag(n) diag(V.fixed.glmm) <- NA V.fixed.glmm[1] <- 1 B.fixed.glmm <- matrix(c(rep(0,p),rep(NA, (n - 1) * p)), p, n) # reference taxa [,1] are set to 0 B.start.glmm <- matrix(c(rep(0,p),rep(.01, (n - 1) * p)), p, n) # reference taxa [,1] are set to 0"},{"path":"https://quinnasena.github.io/multinomialTS/articles/multinomialTS-vignette.html","id":"fitting-mnglmm","dir":"Articles","previous_headings":"Fitting mnTS()","what":"Fitting mnGLMM()","title":"multinomialTS Vignette","text":"Remember mnGLMM() handle gaps data fits complete XX YY matrices. created variable observation indices (sample_idx), mnGLMM() index matrices variable: e.g., story_pollen_matrix[sample_idx, ]. outputs mnGLMM() can examined summary(glmm_mod) function.","code":"# fit glmm start_time <- Sys.time() glmm_mod <- mnGLMM(Y = story_pollen_matrix[sample_idx, ],                    X = story_char_matrix_scaled[sample_idx, ,drop = F],                    B.start = B.start.glmm,                    B.fixed = B.fixed.glmm,                    V.fixed = V.fixed.glmm) end_time <- Sys.time() end_time - start_time Time difference of 14.74743 secs summary(glmm_mod) Call: mnGLMM with Tmax =  93  n =  5  logLik = 506.1927,  AIC = -984.3855 [df = 14]  dispersion parameter =  1  Fitted Coefficients with approximate se                            Coef.         se          t            P (intercept).hardwood  0.32520544 0.08449697  3.8487232 1.187351e-04 char_acc.hardwood    -0.15611315 0.08828450 -1.7682962 7.701141e-02 (intercept).Ulmus    -0.31413043 0.11063692 -2.8392911 4.521389e-03 char_acc.Ulmus       -0.27877420 0.10904240 -2.5565671 1.057107e-02 (intercept).Fagus    -0.26463309 0.11061622 -2.3923534 1.674071e-02 char_acc.Fagus       -0.44517877 0.11465596 -3.8827356 1.032879e-04 (intercept).Quercus   0.99820549 0.08800678 11.3423702 8.092255e-30 char_acc.Quercus     -0.06223211 0.09098390 -0.6839903 4.939813e-01   Overall model  B =             other   hardwood      Ulmus      Fagus     Quercus (intercept)     0  0.3252054 -0.3141304 -0.2646331  0.99820549 char_acc        0 -0.1561132 -0.2787742 -0.4451788 -0.06223211  sigma =  1.055384  V =          other   hardwood     Ulmus     Fagus    Quercus other        1 0.00000000 0.0000000 0.0000000 0.00000000 hardwood     0 0.00443052 0.0000000 0.0000000 0.00000000 Ulmus        0 0.00000000 0.3021339 0.0000000 0.00000000 Fagus        0 0.00000000 0.0000000 0.3045231 0.00000000 Quercus      0 0.00000000 0.0000000 0.0000000 0.07575829"},{"path":"https://quinnasena.github.io/multinomialTS/articles/multinomialTS-vignette.html","id":"setting-up-parameters-for-mnts","dir":"Articles","previous_headings":"Fitting mnTS()","what":"Setting-up parameters for mnTS()","title":"multinomialTS Vignette","text":"Now, lets set parameters mnTS(). mTS() needs: row indices : sample_idx number covariates: p number state variables: n BOBO: B0.start.mnTS (intercept) BB: B.start.mnTS (driver-taxa) CC: C.start.mnTS (taxa interactions) VV: V.start.mnTS (cross-correlated error) BOBO: B0.fixed.mnTS BB: B.fixed.mnTS CC: C.fixed.mnTS VV: V.fixed.mnTS using output mnGLMM() starting values matrices B0B0, BB, VV. mnGLMM() provide estimates CC, handle CC little differently input values close zero parameter estimated let mnTS() rest.","code":"# B.start etc B0.start.mnTS <- glmm_mod$B[1, , drop = F] B.start.mnTS <- glmm_mod$B[2, , drop = F]  sigma.start.mnTS <- glmm_mod$sigma  V.fixed.mnTS <- matrix(NA, n, n) # Covariance matrix of environmental variation in process eq V.fixed.mnTS[1] <- 1  V.start.mnTS <- V.fixed.mnTS V.start.mnTS <- glmm_mod$V  B.fixed.mnTS <- matrix(NA, p-1, n) B.fixed.mnTS[,1] <- 0 B0.fixed.mnTS = matrix(c(0, rep(NA, n - 1)), nrow = 1, ncol = n)  # Set-up C without interactions C.start.mnTS  <- .5 * diag(n) C.fixed.mnTS <- C.start.mnTS C.fixed.mnTS[C.fixed.mnTS != 0] <- NA  # Set-up C with interactions between Fagus and Quercus C.start.int.mnTS  <- .5 * diag(n) C.start.int.mnTS[5, 4] <- .001 C.start.int.mnTS[4, 5] <- .001 C.fixed.int.mnTS <- C.start.int.mnTS C.fixed.int.mnTS[C.fixed.int.mnTS != 0] <- NA"},{"path":"https://quinnasena.github.io/multinomialTS/articles/multinomialTS-vignette.html","id":"sec-mnts","dir":"Articles","previous_headings":"Fitting mnTS()","what":"Fitting mnTS()","title":"multinomialTS Vignette","text":"Remember, mnTS() handle gaps state-variables data covariate matrix. following code, use complete (gaps) YY matrix story_pollen_matrix[sample_idx, ] dimensions: 93, 5. full XX matrix: story_char_matrix_scaled dimensions: 160, 1 fit model twice: without taxa interactions without taxa interactions. Without interactions interactions start_time <- Sys.time() mnTS_mod <- mnTS(Y = story_pollen_matrix[sample_idx, ],                  X = story_char_matrix_scaled, Tsample = sample_idx,                  B0.start = B0.start.mnTS, B0.fixed = B0.fixed.mnTS,                  B.start = B.start.mnTS, B.fixed = B.fixed.mnTS,                  C.start = C.start.mnTS, C.fixed = C.fixed.mnTS,                  V.start = V.start.mnTS, V.fixed = V.fixed.mnTS,                  dispersion.fixed = 1, maxit.optim = 1e+6) # maxit.optim max number iterations optimiser complete stopping. # increase maxit.optim model needs lot time fit. end_time <- Sys.time() end_time - start_time  Time difference 1.201289 mins","code":"start_time <- Sys.time() mnTS_mod <- mnTS(Y = story_pollen_matrix[sample_idx, ],                  X = story_char_matrix_scaled, Tsample = sample_idx,                  B0.start = B0.start.mnTS, B0.fixed = B0.fixed.mnTS,                  B.start = B.start.mnTS, B.fixed = B.fixed.mnTS,                  C.start = C.start.mnTS, C.fixed = C.fixed.mnTS,                  V.start = V.start.mnTS, V.fixed = V.fixed.mnTS,                  dispersion.fixed = 1, maxit.optim = 1e+6) # maxit.optim is the max number of iterations the optimiser will complete before stopping. # increase maxit.optim if the model needs a lot of time to fit. end_time <- Sys.time() end_time - start_time Time difference of 1.201289 mins start_time <- Sys.time() mnTS_mod_int <- mnTS(Y = story_pollen_matrix[sample_idx, ],                      X = story_char_matrix_scaled, Tsample = sample_idx,                      B0.start = mnTS_mod$B0, B0.fixed = B0.fixed.mnTS,                      B.start = mnTS_mod$B, B.fixed = B.fixed.mnTS,                      C.start = mnTS_mod$C, C.fixed = C.fixed.int.mnTS,                      V.start = mnTS_mod$V, V.fixed = V.fixed.mnTS,                      dispersion.fixed = 1, maxit.optim = 1e+6) end_time <- Sys.time()  end_time - start_time Time difference of 3.479115 mins"},{"path":"https://quinnasena.github.io/multinomialTS/articles/multinomialTS-vignette.html","id":"sec-interp","dir":"Articles","previous_headings":"","what":"Interpreting outputs","title":"multinomialTS Vignette","text":"coef() summary() functions show model outputs. Let’s check coefficients interaction model: found bootstrapping provides better estimates standard erros (subsequent P-values). boot() function bootstrap model, may take long time. won’t today, strongly recommend bootstrapping final models. summary model provides log likelihood AIC (akaike information criterion). can used comparing models. Today use AIC. AIC penalised number parameters estimated, can better comparing models one parameters estimated (.e., interaction model estimating parameters model without interactions). AIC (log likelihood) values can accessed directly mnTS_mod_int$AIC.","code":"summary(mnTS_mod_int) Call: mnTS with Tmax =  93  n =  5  logLik = 750.0241,  AIC = -1438.048 [df = 31]  dispersion parameter =  1  Fitted Coefficients with approximate se                            Coef.          se          t             P hardwood              0.64627755 0.128823953   5.016750  5.255293e-07 Ulmus                -0.29933182 0.113566390  -2.635743  8.395329e-03 Fagus                -0.91867049 0.255370791  -3.597398  3.214159e-04 Quercus               1.38347522 0.089608656  15.439080  8.936578e-54 sp.other.other        0.89177470 0.011064525  80.597648  0.000000e+00 sp.hardwood.hardwood  0.96083347 0.013894772  69.150720  0.000000e+00 sp.Ulmus.Ulmus        0.94591268 0.017282507  54.732377  0.000000e+00 sp.Fagus.Fagus        0.83383821 0.036552053  22.812350 3.457807e-115 sp.Quercus.Fagus      0.06930431         NaN        NaN           NaN sp.Fagus.Quercus     -0.08431459         NaN        NaN           NaN sp.Quercus.Quercus    0.99072926 0.007589615 130.537489  0.000000e+00 char_acc.hardwood    -0.15774081 0.021983518  -7.175413  7.208936e-13 char_acc.Ulmus       -0.15937356 0.037985313  -4.195663  2.720749e-05 char_acc.Fagus       -0.21576678         NaN        NaN           NaN char_acc.Quercus     -0.18580969 0.019967371  -9.305666  1.331547e-20   Fitted Coefficients with conditional approximate se                            Coef.          se          t            P hardwood              0.64627755 0.146885289   4.399879 1.083111e-05 Ulmus                -0.29933182 0.176984151  -1.691292 9.078111e-02 Fagus                -0.91867049 0.265149460  -3.464727 5.307700e-04 Quercus               1.38347522 0.068468911  20.205889 8.689079e-91 sp.other.other        0.89177470 0.010890072  81.888780 0.000000e+00 sp.hardwood.hardwood  0.96083347 0.010722160  89.611929 0.000000e+00 sp.Ulmus.Ulmus        0.94591268 0.009032307 104.725480 0.000000e+00 sp.Fagus.Fagus        0.83383821 0.021011423  39.684996 0.000000e+00 sp.Quercus.Fagus      0.06930431 0.007267487   9.536213 1.481432e-21 sp.Fagus.Quercus     -0.08431459 0.034418562  -2.449684 1.429818e-02 sp.Quercus.Quercus    0.99072926 0.014078411  70.372233 0.000000e+00 sigma                 0.66036129 0.037411671  17.651211 9.959806e-70 char_acc.hardwood    -0.15774081 0.024046618  -6.559792 5.388286e-11 char_acc.Ulmus       -0.15937356 0.031947105  -4.988670 6.079642e-07 char_acc.Fagus       -0.21576678 0.060354060  -3.575017 3.502053e-04 char_acc.Quercus     -0.18580969 0.018905045  -9.828577 8.480861e-23   Overall model  B0 =             other  hardwood      Ulmus      Fagus  Quercus (intercept)     0 0.6462775 -0.2993318 -0.9186705 1.383475   B =          other   hardwood      Ulmus      Fagus    Quercus char_acc     0 -0.1577408 -0.1593736 -0.2157668 -0.1858097   C =              other  hardwood     Ulmus      Fagus     Quercus other    0.8917747 0.0000000 0.0000000 0.00000000  0.00000000 hardwood 0.0000000 0.9608335 0.0000000 0.00000000  0.00000000 Ulmus    0.0000000 0.0000000 0.9459127 0.00000000  0.00000000 Fagus    0.0000000 0.0000000 0.0000000 0.83383821 -0.08431459 Quercus  0.0000000 0.0000000 0.0000000 0.06930431  0.99072926  sigma =  0.6603613  V =              other   hardwood      Ulmus     Fagus    Quercus other    1.0000000 0.25286788 0.24451372 0.4181247 0.13922069 hardwood 0.2528679 0.07460389 0.06003974 0.1084949 0.03416640 Ulmus    0.2445137 0.06003974 0.09392674 0.1082596 0.03023850 Fagus    0.4181247 0.10849494 0.10825965 0.3166117 0.02520510 Quercus  0.1392207 0.03416640 0.03023850 0.0252051 0.02726373 coef(mnTS_mod_int) Coef.          se          t             P hardwood              0.64627755 0.128823953   5.016750  5.255293e-07 Ulmus                -0.29933182 0.113566390  -2.635743  8.395329e-03 Fagus                -0.91867049 0.255370791  -3.597398  3.214159e-04 Quercus               1.38347522 0.089608656  15.439080  8.936578e-54 sp.other.other        0.89177470 0.011064525  80.597648  0.000000e+00 sp.hardwood.hardwood  0.96083347 0.013894772  69.150720  0.000000e+00 sp.Ulmus.Ulmus        0.94591268 0.017282507  54.732377  0.000000e+00 sp.Fagus.Fagus        0.83383821 0.036552053  22.812350 3.457807e-115 sp.Quercus.Fagus      0.06930431         NaN        NaN           NaN sp.Fagus.Quercus     -0.08431459         NaN        NaN           NaN sp.Quercus.Quercus    0.99072926 0.007589615 130.537489  0.000000e+00 char_acc.hardwood    -0.15774081 0.021983518  -7.175413  7.208936e-13 char_acc.Ulmus       -0.15937356 0.037985313  -4.195663  2.720749e-05 char_acc.Fagus       -0.21576678         NaN        NaN           NaN char_acc.Quercus     -0.18580969 0.019967371  -9.305666  1.331547e-20 data.frame(without_interactions = mnTS_mod$AIC,            with_interactions = mnTS_mod_int$AIC) without_interactions with_interactions 1            -1391.369         -1438.048"},{"path":"https://quinnasena.github.io/multinomialTS/articles/multinomialTS-vignette.html","id":"comparing-models","dir":"Articles","previous_headings":"Fitting mnTS()","what":"Comparing models","title":"multinomialTS Vignette","text":"summary model provides log likelihood AIC (akaike information criterion). can used comparing models. Today use AIC. AIC penalised number parameters estimated, can better comparing models one parameters estimated (.e., interaction model estimating parameters model without interactions). AIC (log likelihood) values can accessed directly mnTS_mod_int$AIC.","code":"data.frame(without_interactions = mnTS_mod$AIC,            with_interactions = mnTS_mod_int$AIC) without_interactions with_interactions 1            -1391.369         -1438.048"},{"path":"https://quinnasena.github.io/multinomialTS/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Quinn Asena. Maintainer.","code":""},{"path":"https://quinnasena.github.io/multinomialTS/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ives , Asena Q (2025). multinomialTS: State-Space Modelling Multinomially Distributed Data. R package version 1.0.0, https://quinnasena.github.io/multinomialTS/.","code":"@Manual{,   title = {multinomialTS: State-Space Modelling of Multinomially Distributed Data},   author = {Anthony Ives and Quinn Asena},   year = {2025},   note = {R package version 1.0.0},   url = {https://quinnasena.github.io/multinomialTS/}, }"},{"path":"https://quinnasena.github.io/multinomialTS/index.html","id":"multinomialts","dir":"","previous_headings":"","what":"State-Space Modelling of Multinomially Distributed Data","title":"State-Space Modelling of Multinomially Distributed Data","text":"initial working version multinomialTS. full working tutorial using model, including installation instructions, can found : https://github.com/QuinnAsena/state-space-workhop-ESA.","code":""},{"path":"https://quinnasena.github.io/multinomialTS/reference/boot.html","id":null,"dir":"Reference","previous_headings":"","what":"Multinomial state-space bootstrap — boot","title":"Multinomial state-space bootstrap — boot","text":"generic bootstrap function models.","code":""},{"path":"https://quinnasena.github.io/multinomialTS/reference/boot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multinomial state-space bootstrap — boot","text":"","code":"boot(object, ...)"},{"path":"https://quinnasena.github.io/multinomialTS/reference/boot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multinomial state-space bootstrap — boot","text":"object object bootstrap method defined. ... Additional arguments passed method.","code":""},{"path":"https://quinnasena.github.io/multinomialTS/reference/boot.mnTS.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrap method for mnTS objects — boot.mnTS","title":"Bootstrap method for mnTS objects — boot.mnTS","text":"Provides bootstrapped confidence intervals object class mnTS.","code":""},{"path":"https://quinnasena.github.io/multinomialTS/reference/boot.mnTS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrap method for mnTS objects — boot.mnTS","text":"","code":"# S3 method for class 'mnTS' boot(mod, reps, dispersion.fixed = 1, maxit.optim = 1e+05, ...)"},{"path":"https://quinnasena.github.io/multinomialTS/reference/boot.mnTS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrap method for mnTS objects — boot.mnTS","text":"reps Integer. Number bootstrap replications. dispersion.fixed Numeric. Dispersion parameter (default 1). maxit.optim Integer. Max iterations optimization (default 100000). ... Additional arguments (currently used). object object class mnTS.","code":""},{"path":"https://quinnasena.github.io/multinomialTS/reference/coef.mnTS.html","id":null,"dir":"Reference","previous_headings":"","what":"Coefficients for Multinomial State-Space Model — coef.mnTS","title":"Coefficients for Multinomial State-Space Model — coef.mnTS","text":"Extracts estimated coefficients fitted multinomial state-space model.","code":""},{"path":"https://quinnasena.github.io/multinomialTS/reference/coef.mnTS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coefficients for Multinomial State-Space Model — coef.mnTS","text":"","code":"# S3 method for class 'mnTS' coef(mod, ...)"},{"path":"https://quinnasena.github.io/multinomialTS/reference/coef.mnTS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coefficients for Multinomial State-Space Model — coef.mnTS","text":"mod object class \"mnTS\", returned mnTS function. ... Additional arguments (currently unused).","code":""},{"path":"https://quinnasena.github.io/multinomialTS/reference/coef.mnTS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coefficients for Multinomial State-Space Model — coef.mnTS","text":"list estimated model coefficients.","code":""},{"path":"https://quinnasena.github.io/multinomialTS/reference/mnGLMM.html","id":null,"dir":"Reference","previous_headings":"","what":"Multinomial Generalized Linear Mixed Model (mnGLMM) — mnGLMM","title":"Multinomial Generalized Linear Mixed Model (mnGLMM) — mnGLMM","text":"Fits multivariate generalized linear regression model multinomially distributed response data. function estimates driver-species relationships (B coefficients), observation-level dispersion, species covariance structures via maximum likelihood REML.","code":""},{"path":"https://quinnasena.github.io/multinomialTS/reference/mnGLMM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multinomial Generalized Linear Mixed Model (mnGLMM) — mnGLMM","text":"","code":"mnGLMM(   Y,   X = NULL,   B.fixed = if (is.null(X)) matrix(c(0, rep(NA, ncol(Y) - 1)), nrow = 1, ncol = ncol(Y))     else matrix(c(rep(0, (ncol(X) + 1) * ncol(Y)), rep(NA, (ncol(Y) - 1) * (ncol(X) +     1))), nrow = ncol(X) + 1, ncol = ncol(Y)),   B.start = if (is.null(X)) matrix(0, nrow = 1, ncol = ncol(Y)) else matrix(0, nrow =     ncol(X) + 1, ncol = ncol(Y)),   sigma.fixed = NA,   sigma.start = 0.1,   dispersion.fixed = 1,   dispersion.start = 1,   V.fixed = diag(ncol(Y)),   V.start = diag(ncol(Y)),   method = \"bobyqa\",   optim.control = NULL,   maxit.optim = 1e+05,   REML = FALSE,   compute.information.matrix = TRUE )"},{"path":"https://quinnasena.github.io/multinomialTS/reference/mnGLMM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multinomial Generalized Linear Mixed Model (mnGLMM) — mnGLMM","text":"Y matrix multinomially distributed count data (e.g., community count data). X matrix covariates (predictors), may mixed type Covariates scaled appropriate. Can NULL. B.fixed matrix indicating B coefficients (driver-species relationships) estimate. number columns must equal ncol(Y) (number species), number rows must equal ncol(X) + 1 (intercept + covariates). B.start matrix starting values B coefficients. Dimensions must match B.fixed. sigma.fixed Fixed value overall model variance. Use NA estimate model. sigma.start Starting value estimating sigma.fixed (default 0.1). dispersion.fixed Fixed dispersion parameter account - -dispersion. value 1 corresponds extra dispersion (pure multinomial). dispersion.start Starting value estimating dispersion.fixed. V.fixed species--species covariance matrix representing environmental variation. V.start Starting values V.fixed. method Optimization method. Acceptable values include \"Nelder-Mead\", \"BFGS\" (via optim), \"bobyqa\" (via minqa package). optim.control Optional list control parameters passed optimizer. See minqa package documentation details. maxit.optim Maximum number iterations optimizer (default 1e+05). Increase optimizer needs itterations. REML Logical. TRUE, uses restricted maximum likelihood variance estimation. compute.information.matrix Logical. TRUE, computes observed information matrix.","code":""},{"path":"https://quinnasena.github.io/multinomialTS/reference/mnGLMM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multinomial Generalized Linear Mixed Model (mnGLMM) — mnGLMM","text":"object class \"mnGLMM\".","code":""},{"path":"https://quinnasena.github.io/multinomialTS/reference/mnGLMM.ml.html","id":null,"dir":"Reference","previous_headings":"","what":"Multinomial GLMM Maximum likelihood — mnGLMM.ml","title":"Multinomial GLMM Maximum likelihood — mnGLMM.ml","text":"internal function called mnGLMM.","code":""},{"path":"https://quinnasena.github.io/multinomialTS/reference/mnGLMM.ml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multinomial GLMM Maximum likelihood — mnGLMM.ml","text":"","code":"mnGLMM.ml(par, par.fixed, Y, X, fitted.values = FALSE, REML = FALSE)"},{"path":"https://quinnasena.github.io/multinomialTS/reference/mnTS.html","id":null,"dir":"Reference","previous_headings":"","what":"Multinomial State-Space Model (mnTS) — mnTS","title":"Multinomial State-Space Model (mnTS) — mnTS","text":"Fits multinomial state-space model multivariate count data, allowing latent temporal processes, covariate effects, species interactions.","code":""},{"path":"https://quinnasena.github.io/multinomialTS/reference/mnTS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multinomial State-Space Model (mnTS) — mnTS","text":"","code":"mnTS(   Y,   X = NULL,   Tsample = 1:nrow(Y),   B0.fixed = matrix(c(0, rep(NA, ncol(Y) - 1)), nrow = 1, ncol = ncol(Y)),   B0.start = matrix(0, nrow = 1, ncol = ncol(Y)),   C.fixed = diag(rep(NA, ncol(Y))),   C.start = 0.01 * diag(ncol(Y)),   B.fixed = if (is.null(X)) NULL else matrix(NA, nrow = ncol(X), ncol = ncol(Y)),   B.start = if (is.null(X)) NULL else matrix(0, nrow = ncol(X), ncol = ncol(Y)),   sigma.fixed = NA,   sigma.start = 0.1,   dispersion.fixed = 1,   dispersion.start = 1,   V.fixed = diag(ncol(Y)),   V.start = diag(ncol(Y)),   compute.information.matrix = TRUE,   method = \"bobyqa\",   optim.control = NULL,   maxit.optim = 1e+05,   hessian.method.args = list(eps = 1e-04, d = 1e-04, r = 4, v = 2) )"},{"path":"https://quinnasena.github.io/multinomialTS/reference/mnTS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multinomial State-Space Model (mnTS) — mnTS","text":"Y matrix multinomially distributed count data (e.g., community count data). X matrix covariates (predictors), may mixed type. Covariates scaled appropriate. Can NULL. Tsample vector row indices specifying subset observations Y treat temporal samples. B0.fixed 1 ncol(Y) matrix species intercepts estimate. B0.start matrix starting values B0.fixed. C.fixed species--species matrix interactions, indicating interactions estimate. C.start matrix starting values C.fixed. B.fixed matrix indicating B coefficients (driver-species relationships) estimate. ncol(Y) columns ncol(X) rows. B.start matrix starting values B.fixed. Dimensions B.start match B.fixed. sigma.fixed Fixed value overall model variance. Use NA estimate model. sigma.start Starting value estimating sigma.fixed. dispersion.fixed Fixed dispersion parameter observation-level variation. value 1 corresponds - -dispersion. dispersion.start Starting value estimating dispersion.fixed. V.fixed species--species covariance matrix representing environmental variation. V.start Starting values V.fixed. compute.information.matrix Logical. TRUE, computes observed information matrix. method Optimization method. Acceptable values include \"Nelder-Mead\", \"BFGS\" (via optim), \"bobyqa\" (via minqa package). optim.control Optional list control parameters passed optimizer. See minqa package documentation details. maxit.optim Maximum number iterations optimizer (default 1e+05). Increase optimizer needs iterations. hessian.method.args list control parameters passed numerical Hessian calculator (e.g., numDeriv::hessian).","code":""},{"path":"https://quinnasena.github.io/multinomialTS/reference/mnTS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multinomial State-Space Model (mnTS) — mnTS","text":"object class \"mnTS\" containing estimated parameters.","code":""},{"path":"https://quinnasena.github.io/multinomialTS/reference/mnTS.ml.html","id":null,"dir":"Reference","previous_headings":"","what":"Multinomial state-space Maximum likelihood — mnTS.ml","title":"Multinomial state-space Maximum likelihood — mnTS.ml","text":"internal function called mnTS","code":""},{"path":"https://quinnasena.github.io/multinomialTS/reference/mnTS.ml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multinomial state-space Maximum likelihood — mnTS.ml","text":"","code":"mnTS.ml(par, par.fixed, Y, X = NULL, Tsample, fitted.values = FALSE)"},{"path":"https://quinnasena.github.io/multinomialTS/reference/mnTS.ml.wrapper.html","id":null,"dir":"Reference","previous_headings":"","what":"mnTS Wrapper — mnTS.ml.wrapper","title":"mnTS Wrapper — mnTS.ml.wrapper","text":"internal functions required multinomialTS.","code":""},{"path":"https://quinnasena.github.io/multinomialTS/reference/mnTS.ml.wrapper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"mnTS Wrapper — mnTS.ml.wrapper","text":"","code":"mnTS.ml.wrapper(par, par.fixed, Y, X, Tsample)"},{"path":"https://quinnasena.github.io/multinomialTS/reference/mnTS_ml_cpp_listout.html","id":null,"dir":"Reference","previous_headings":"","what":"mnTS_ml_cpp_list — mnTS_ml_cpp_listout","title":"mnTS_ml_cpp_list — mnTS_ml_cpp_listout","text":"internal functions required multinomialTS.","code":""},{"path":"https://quinnasena.github.io/multinomialTS/reference/mnTS_ml_cpp_listout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"mnTS_ml_cpp_list — mnTS_ml_cpp_listout","text":"","code":"mnTS_ml_cpp_listout(par, par_fixed, Y, X, Tsample)"},{"path":"https://quinnasena.github.io/multinomialTS/reference/simulate.mnTS.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Data from a Multinomial State-Space Model — simulate.mnTS","title":"Simulate Data from a Multinomial State-Space Model — simulate.mnTS","text":"Generates simulated datasets fitted mnTS object.","code":""},{"path":"https://quinnasena.github.io/multinomialTS/reference/simulate.mnTS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Data from a Multinomial State-Space Model — simulate.mnTS","text":"","code":"# S3 method for class 'mnTS' simulate(mod, ...)"},{"path":"https://quinnasena.github.io/multinomialTS/reference/simulate.mnTS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Data from a Multinomial State-Space Model — simulate.mnTS","text":"mod object class \"mnTS\", returned mnTS function. ... Additional arguments passed simulation routine.","code":""},{"path":"https://quinnasena.github.io/multinomialTS/reference/simulate.mnTS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Data from a Multinomial State-Space Model — simulate.mnTS","text":"simulated dataset structure response variable     Y used fit model.","code":""},{"path":"https://quinnasena.github.io/multinomialTS/reference/story_char_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Story Charcoal Matrix — story_char_matrix","title":"Story Charcoal Matrix — story_char_matrix","text":"matrix charcoal accumulation rates Story Lake, Indiana.    matrix binned 50-year resolution scaled.","code":""},{"path":"https://quinnasena.github.io/multinomialTS/reference/story_char_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Story Charcoal Matrix — story_char_matrix","text":"","code":"story_char_matrix"},{"path":"https://quinnasena.github.io/multinomialTS/reference/story_char_matrix.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Story Charcoal Matrix — story_char_matrix","text":"`1` column matrix `160` rows (observations).","code":""},{"path":"https://quinnasena.github.io/multinomialTS/reference/story_char_matrix.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Story Charcoal Matrix — story_char_matrix","text":"details see vignette","code":""},{"path":"https://quinnasena.github.io/multinomialTS/reference/story_char_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Story Charcoal Matrix — story_char_matrix","text":"","code":"data(story_char_matrix) head(story_char_matrix) #>       char_acc #> [1,]  3.428030 #> [2,]  4.002948 #> [3,] 11.145338 #> [4,]  4.060201 #> [5,]  5.292200 #> [6,]  8.241451"},{"path":"https://quinnasena.github.io/multinomialTS/reference/story_char_wide.html","id":null,"dir":"Reference","previous_headings":"","what":"Story Charcoal Wide — story_char_wide","title":"Story Charcoal Wide — story_char_wide","text":"~10,000-year data set Story Lake, Indiana, modelled ages, sample    depths, charcoal accumulation rate sediment core sample.","code":""},{"path":"https://quinnasena.github.io/multinomialTS/reference/story_char_wide.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Story Charcoal Wide — story_char_wide","text":"","code":"story_char_wide"},{"path":"https://quinnasena.github.io/multinomialTS/reference/story_char_wide.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Story Charcoal Wide — story_char_wide","text":"tibble `736` rows `3` columns.","code":""},{"path":"https://quinnasena.github.io/multinomialTS/reference/story_char_wide.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Story Charcoal Wide — story_char_wide","text":"details see https://doi.org/10.1111/1365-2745.14289","code":""},{"path":"https://quinnasena.github.io/multinomialTS/reference/story_char_wide.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Story Charcoal Wide — story_char_wide","text":"","code":"data(story_char_wide) str(story_char_wide) #> tibble [736 × 3] (S3: tbl_df/tbl/data.frame) #>  $ age     : num [1:736] -66.2 -63.4 -61.5 -59.8 -58.5 ... #>  $ depth   : num [1:736] 0.5 1.5 2.5 3.5 4.5 5.5 6.5 7.5 8.5 9.5 ... #>  $ char_acc: num [1:736] 0 15.8 40.3 21.8 37.3 ..."},{"path":"https://quinnasena.github.io/multinomialTS/reference/story_pollen_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Story Pollen Matrix — story_pollen_matrix","title":"Story Pollen Matrix — story_pollen_matrix","text":"matrix pollen taxa counts Story Lake, Indiana. Data organised    reference group \"\" taxa, functional group hardwood    taxa, target taxa Fagus grandifolia, Ulmus spp., Quercus spp.    Data binned 50-year resolution empty bins filled    0-values (.e., rows 0 empty bins, see vignette details).","code":""},{"path":"https://quinnasena.github.io/multinomialTS/reference/story_pollen_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Story Pollen Matrix — story_pollen_matrix","text":"","code":"story_pollen_matrix"},{"path":"https://quinnasena.github.io/multinomialTS/reference/story_pollen_matrix.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Story Pollen Matrix — story_pollen_matrix","text":"matrix `160` rows (samples) `5` columns (taxa).","code":""},{"path":"https://quinnasena.github.io/multinomialTS/reference/story_pollen_matrix.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Story Pollen Matrix — story_pollen_matrix","text":"details see vignette","code":""},{"path":"https://quinnasena.github.io/multinomialTS/reference/story_pollen_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Story Pollen Matrix — story_pollen_matrix","text":"","code":"data(story_pollen_matrix) summary(story_pollen_matrix) #>      other           hardwood      Fagus grandifolia     Ulmus       #>  Min.   :  0.00   Min.   :  0.00   Min.   : 0.00     Min.   : 0.00   #>  1st Qu.:  0.00   1st Qu.:  0.00   1st Qu.: 0.00     1st Qu.: 0.00   #>  Median : 30.00   Median : 48.00   Median : 7.50     Median :16.50   #>  Mean   : 26.94   Mean   : 35.66   Mean   :19.71     Mean   :18.87   #>  3rd Qu.: 40.00   3rd Qu.: 62.25   3rd Qu.:39.00     3rd Qu.:29.00   #>  Max.   :291.00   Max.   :161.00   Max.   :98.00     Max.   :84.00   #>     Quercus       #>  Min.   :  0.00   #>  1st Qu.:  0.00   #>  Median : 91.50   #>  Mean   : 70.31   #>  3rd Qu.:121.25   #>  Max.   :248.00"},{"path":"https://quinnasena.github.io/multinomialTS/reference/story_pollen_wide.html","id":null,"dir":"Reference","previous_headings":"","what":"Story Pollen Wide — story_pollen_wide","title":"Story Pollen Wide — story_pollen_wide","text":"~10,000-year data set Story Lake, Indiana, modelled ages, sample    depths, pollen taxa. Data organised reference group    \"\" taxa, functional group hardwood taxa, target taxa    Fagus grandifolia, Ulmus spp., Quercus spp.","code":""},{"path":"https://quinnasena.github.io/multinomialTS/reference/story_pollen_wide.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Story Pollen Wide — story_pollen_wide","text":"","code":"story_pollen_wide"},{"path":"https://quinnasena.github.io/multinomialTS/reference/story_pollen_wide.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Story Pollen Wide — story_pollen_wide","text":"tibble `95` rows (observations) `7` columns.","code":""},{"path":"https://quinnasena.github.io/multinomialTS/reference/story_pollen_wide.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Story Pollen Wide — story_pollen_wide","text":"details see https://doi.org/10.1111/1365-2745.14289","code":""},{"path":"https://quinnasena.github.io/multinomialTS/reference/story_pollen_wide.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Story Pollen Wide — story_pollen_wide","text":"","code":"data(story_pollen_wide) names(story_pollen_wide) #> [1] \"age\"               \"depth\"             \"other\"             #> [4] \"hardwood\"          \"Fagus grandifolia\" \"Quercus\"           #> [7] \"Ulmus\""},{"path":"https://quinnasena.github.io/multinomialTS/reference/summary.mnGLMM.html","id":null,"dir":"Reference","previous_headings":"","what":"GLMM summary — summary.mnGLMM","title":"GLMM summary — summary.mnGLMM","text":"Prints summary mnGLMM model.","code":""},{"path":"https://quinnasena.github.io/multinomialTS/reference/summary.mnGLMM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GLMM summary — summary.mnGLMM","text":"","code":"# S3 method for class 'mnGLMM' summary(mod, ...)"},{"path":"https://quinnasena.github.io/multinomialTS/reference/summary.mnGLMM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GLMM summary — summary.mnGLMM","text":"mod object class \"mnGLMM\"","code":""},{"path":"https://quinnasena.github.io/multinomialTS/reference/summary.mnGLMM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GLMM summary — summary.mnGLMM","text":"Prints coefficient estimates fitted mnGLMM","code":""},{"path":"https://quinnasena.github.io/multinomialTS/reference/summary.mnTS.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary Method for Multinomial State-Space Models — summary.mnTS","title":"Summary Method for Multinomial State-Space Models — summary.mnTS","text":"Provides summary fitted multinomial state-space model.","code":""},{"path":"https://quinnasena.github.io/multinomialTS/reference/summary.mnTS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary Method for Multinomial State-Space Models — summary.mnTS","text":"","code":"# S3 method for class 'mnTS' summary(mod, ...)"},{"path":"https://quinnasena.github.io/multinomialTS/reference/summary.mnTS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary Method for Multinomial State-Space Models — summary.mnTS","text":"mod object class \"mnTS\", typically returned mnTS function. ... Additional arguments (currently unused).","code":""},{"path":"https://quinnasena.github.io/multinomialTS/reference/summary.mnTS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary Method for Multinomial State-Space Models — summary.mnTS","text":"Returns summary list containing key model estimates.     Also prints summary console.","code":""}]
